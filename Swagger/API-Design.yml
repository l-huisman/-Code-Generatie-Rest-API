openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/684651_1/Mr.Banky/1.0.0
info:
  description: This is a simple API
  version: "1.0.0"
  title: Simple Inventory API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: User
    description: Operations about user
  - name: Transaction
    description: Operations about transaction
security:
  - bearerAuth: [ ]
paths:
  /users:
    get:
      tags:
        - User
      summary: Get all users
      description: Retrieve all users
      operationId: getAllUsers
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            format: int64
          description: The limit for the max amount of accounts
        - in: query
          name: offset
          schema:
            type: integer
            format: int64
          description: The offset for the amount of accounts
      responses:
        "200":
          description: The requested users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRequest"
        "400":
          description: "Invalid data given"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "401":
          description: You are unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "409":
          description: Something went wrong
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
    post:
      tags:
        - User
      summary: Create a new user or login
      description: Create a new user or login
      parameters:
        - in: query
          name: login
          schema:
            type: boolean
          description: If true, the user will be logged in
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRequest"
        "400":
          description: "Invalid data given"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "401":
          description: You are unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "409":
          description: Something went wrong
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
  /users/{user_id}:
    get:
      tags:
        - User
      summary: Get user by id
      description: Retrieve a user by id
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          description: "The id that needs to be fetched. Use 1 for testing. "
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The requested user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid data given
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "401":
          description: You are unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "409":
          description: Something went wrong
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
    put:
      tags:
        - User
      summary: Update user
      description: Update user
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: "The id that needs to be fetched. Use 1 for testing. "
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserResponse"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid data given
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "401":
          description: You are unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "409":
          description: Something went wrong
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
    delete:
      tags:
        - User
      summary: Delete user
      description: Delete user
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: "The id that needs to be fetched. Use 1 for testing. "
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User deleted
        "400":
          description: "Invalid data given"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "401":
          description: You are unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "409":
          description: Something went wrong
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
  # /users/login:
  #   post:
  #     security: []
  #     tags:
  #       - User
  #     summary: Logs user into the system
  #     description: Logs user into the system
  #     operationId: loginUser
  #     parameters:
  #       - name: email
  #         in: query
  #         description: The email for login
  #         required: true
  #         schema:
  #           type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: User logged in
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/User"
  #       "400":
  #         description: "Invalid data given"
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Error"
  #       "401":
  #         description: You are unauthorized
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Error"
  #       "405":
  #         description: Invalid input
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Error"
  #       "409":
  #         description: Something went wrong
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Error"
  /accounts:
    get:
      tags:
        - Employee
        - Account
      summary: Get all accounts
      description: this can only be done by admins and employees
      operationId: getAllAccounts
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            format: int64
          description: The limit for the max amount of accounts
        - in: query
          name: offset
          schema:
            type: integer
            format: int64
          description: The offset for the amount of accounts
        - in: query
          name: search
          schema:
            type: string
          description: Search
      responses:
        "200":
          description: accounts succesfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountResponse"
        "400":
          description: "No accounts found"
    post:
      tags:
        - Employee
        - Customer
        - Account
      summary: Add new account
      description: Add a new account to an existing user
      operationId: addAccount
      responses:
        '201':
          description: Account created
        '400':
          description: 'Invalid input given'
        '409':
          description: This account already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
        description: Account to add
  /accounts/{accountId}:
    get:
      tags:
        - Employee
        - Customer
        - Account
      summary: Get account by id
      description: Get the account by a supplied id
      operationId: getAccountInfo
      parameters:
        - name: accountId
          in: path
          description: "The id that needs to be fetched. Use 1 for testing. "
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: account succesfully retrieved
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/AccountResponse"
        "400":
          description: "No account found"
    put:
      tags:
        - Employee
        - Customer
        - Account
      summary: Update account details
      description: Update the information of the account
      operationId: updateAccount
      parameters:
        - name: accountId
          in: path
          description: "The id that needs to be fetched. Use 1 for testing. "
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "201":
          description: Account updated
        "400":
          description: "Invalid data given"
        "409":
          description: This account does not exist
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountResponse"
        description: Account to update
    delete:
      tags:
        - Employee
        - Account
      summary: Delete account
      operationId: deleteAccount
      parameters:
        - name: accountId
          in: path
          description: "The id that needs to be fetched. Use 1 for testing. "
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Account deleted
        "400":
          description: "Invalid data given"
        "409":
          description: This account does not exist
  /transactions:
    get:
      tags:
        - Transaction
      summary: Get all transactions
      description: Retrieve all transactions for all accounts
      parameters:
        - in: query
          name: from_date
          schema:
            type: string
            format: date-time
          description: The from date to filter transactions
        - in: query
          name: to_date
          schema:
            type: string
            format: date-time
          description: The to date to filter transactions
        - in: query
          name: iban
          schema:
            type: string
          description: The IBAN to search for
        - in: query
          name: transaction_type_id
          schema:
            type: integer
            format: int64
          description: The transaction_type_id to filter transactions for
        - in: query
          name: balance_relation
          schema:
            type: string
          description: The relation to the balance filter
        - in: query
          name: balance
          schema:
            type: number
          description: The balance to filter for
        - in: query
          name: page_number
          schema:
            type: integer
            format: int64
          description: The page number for the pagination
        - in: query
          name: page_size
          schema:
            type: integer
            format: int64
          description: The size for the pagination
      responses:
        "200":
          description: The requested transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionResponse"
        "401":
          description: You are unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "409":
          description: Something went wrong
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
    post:
      tags:
        - Transaction
      summary: Create a transaction
      description: Create a transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionRequest"
      responses:
        "200":
          description: The transaction was successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionResponse"
        "401":
          description: You are unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "409":
          description: Something went wrong
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "400":
          description: Bad input parameter
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
  /transactions/{id}:
    get:
      tags:
        - Transaction
      summary: Retrieve a specific transactions
      description: Retrieve a specific transaction by id
      parameters:
        - name: id
          in: path
          description: "The id that needs to be fetched. Use 1 for testing. "
          required: true
          schema:
            type: integer
            format: int64
          examples:
            one:
              value: 1
              summary: A sample transaction id
      responses:
        "200":
          description: The requested transaction
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionResponse"
        "401":
          description: You are unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "409":
          description: Something went wrong
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
  /transactions/accounts/{iban}:
    get:
      tags:
        - Transaction
      summary: Retrieve all transactions for account
      description: Retrieve all transactions for account by id
      parameters:
        - name: iban
          in: path
          description: "The iban that needs to be fetched. Use 1 for testing. "
          required: true
          schema:
            type: integer
            format: int64
          examples:
            one:
              value: 1
              summary: A sample account id
      responses:
        "200":
          description: The requested transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionResponse"
        "401":
          description: You are unauthorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
        "409":
          description: Something went wrong
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Error"
components:
  schemas:
    UserResponse:
      type: object
      required:
        - id
        - first_name
        - last_name
        - username
        - email
        - user_type_id
        - created_at
      properties:
        id:
          type: integer
          format: int64
          example: 1
        first_name:
          type: string
          example: Luke
        last_name:
          type: string
          example: Huisman
        username:
          type: string
          example: luke
        email:
          type: string
          example: 684651@student.inholland.nl
        user_type_id:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2019-10-10T12:00:00Z"
    UserRequest:
      type: object
      required:
        - first_name
        - last_name
        - username
        - password
        - email
        - user_type_id
      properties:
        id:
          type: integer
          format: int64
          example: 1
        first_name:
          type: string
          example: Luke
        last_name:
          type: string
          example: Huisman
        username:
          type: string
          example: luke
        password:
          type: string
          example: password
        email:
          type: string
          example: 684651@student.inholland.nl
        user_type_id:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2019-10-10T12:00:00Z"
    TransactionResponse:
      type: object
      required:
        - id
        - fromAccountIban
        - toIban
        - amount
        - transactionType
        - label
        - description
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          example: 1
        fromAccountIban:
          type: string
          example: "MRBANKIE-4132-6745-3452"
        toIban:
          type: string
          example: "MRBANKIE-4132-6745-3452"
        amount:
          type: number
          example: 20.00
        transactionType:
          type: string
          example: "WITHDRAW"
        label:
          type: string
          example: "Hema"
        description:
          type: string
          example: "Betaling voor broodje kaas"
        createdAt:
          type: string
          format: date-time
          example: "2023-08-29T09:12:33.001Z"
    TransactionRequest:
      type: object
      required:
        - fromAccountIban
        - toAccountIban
        - amount
        - transactionType
        - label
        - description
      properties:
        fromAccountIban:
          type: string
          example: "MRBANKIE-4132-6745-3452"
        toIban:
          type: string
          example: "MRBANKIE-4132-6745-3452"
        amount:
          type: number
          example: 20.00
        transactionType:
          type: string
          example: "WITHDRAW"
        label:
          type: string
          example: "Hema"
        description:
          type: string
          example: "Betaling voor broodje kaas"
    AccountResponse:
      type: object
      required:
        - user_id
        - iban_number
        - account_name
        - daily_limit
        - transaction_limit
        - absolute_limit
        - account_type_id
        - created_at
        - balance
        - is_active
      properties:
        id:
          type: integer
          example: 435
        user_id:
          type: integer
          example: 3457
        iban_number:
          type: string
          example: "MRBANKIE-4132-6745-3452"
        account_name:
          type: string
          example: "Saving for car"
        daily_limit:
          type: number
          example: 1200
        transaction_limit:
          type: number
          example: 1500
        absolute_limit:
          type: number
          example: 2000
        account_type_id:
          type: integer
          example: 2
        created_at:
          type: string
          example: "2019-06-22T03:12:35.001Z"
        balance:
          type: number
          example: 40000
        is_active:
          type: boolean
          example: true
    AccountRequest:
      type: object
      required:
        - user_id
        - iban_number
        - account_name
        - daily_limit
        - transaction_limit
        - absolute_limit
        - account_type_id
        - created_at
        - balance
        - is_active
      properties:
        id:
          type: integer
          example: 435
        user_id:
          type: integer
          example: 3457
        iban_number:
          type: string
          example: "MRBANKIE-4132-6745-3452"
        account_name:
          type: string
          example: "Saving for car"
        daily_limit:
          type: number
          example: 1200
        transaction_limit:
          type: number
          example: 1500
        absolute_limit:
          type: number
          example: 2000
        account_type_id:
          type: integer
          example: 2
        created_at:
          type: string
          example: "2019-06-22T03:12:35.001Z"
        balance:
          type: number
          example: 40000
        is_active:
          type: boolean
          example: true
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT